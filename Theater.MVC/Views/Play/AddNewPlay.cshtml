@model Theater.MVC.Models.PlayViewModel

@{
    ViewBag.Title = "Add new play";
}
 
<h2>AddNewPlay</h2>

@using (Html.BeginForm("AddNewPlay", "Play", FormMethod.Post, new { enctype = "multipart/form-data", id="myForm" })) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>PlayViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("file", null, htmlAttributes: new { Type = "file", id="fileUpload", onclick = "Clear()" })
                @Html.ValidationMessageFor(model => model.File, null, new { @class = "text-danger", id="upload" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ScheduledTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ScheduledTime, new { htmlAttributes = new { type="datetime-local", @class = "form-control" } })
             
                @Html.ValidationMessageFor(model => model.ScheduledTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Actors, htmlAttributes: new { @class="control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedActorsIds, new MultiSelectList(Model.Actors, "Id", "FullName"), new { @class = "form-control", multiple="multiple", name="actorsDropdown"})
                @Html.ValidationMessageFor(model => model.SelectedActorsIds, null, new { @class = "text-danger", id="actorsValidate" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">
    function Clear() {
        document.getElementById("upload").innerHTML = "";
    }

    document.getElementById("myForm").addEventListener("submit", function (event) {
        var fileUpload = document.getElementById("fileUpload");
        if (typeof (fileUpload.files) != "undefined") {
            var size = parseFloat(fileUpload.files[0].size / 1024).toFixed(2);
            if (size / 1024 > 4) {
                document.getElementById("upload").innerHTML = "Image size is to big!";
                event.preventDefault();
            }
        }
    });
</script>