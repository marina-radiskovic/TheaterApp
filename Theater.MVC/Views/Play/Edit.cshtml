@model Theater.MVC.Models.EditPlayViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Play", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>PlayViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new {Model.Title, htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <img id="imagePreview" src="@Html.DisplayFor(model => model.ImageVirtualPath)" alt="Display image..." style="width:200px; height: 200px; padding-bottom: 10px;">
                @Html.TextBox("file", null, htmlAttributes: new { Type = "file", id = "imageInput" })
                @Html.ValidationMessageFor(model => model.File, null, new { @class = "text-danger", id = "upload" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new {Model.Description, htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, "Start date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.Canceled == true)
                {
                    <p>CANCELED</p>
                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { type = "date", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                }
                else
                {
                    @Convert.ToString(string.Format("{0:dd-MMM-yyyy}", Model.StartDate))
                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { type = "date", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                }
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, "End date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.Canceled == true)
                {
                    <p>CANCELED</p>
                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { type = "date", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                }
                else
                {
                    @Convert.ToString(string.Format("{0:dd-MMM-yyyy}", Model.EndDate))
                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { type = "date", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Time, "Scheduled time", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.Canceled == true)
                {
                    <p>CANCELED</p>
                    @Html.EditorFor(model => model.Time, new { htmlAttributes = new { type = "time", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
                }
                else
                {
                    @Html.DisplayFor(model => model.Time)<span>h</span>
                    @Html.EditorFor(model => model.Time, new { htmlAttributes = new { type = "time", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Duration)<span>h</span>
                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { type = "time", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActorsString, "Actors", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.ActorsString)
                @Html.ValidationMessageFor(model => model.SelectedActorsIds, null, new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AllActors, "Pick new actors", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SelectedActorsIds, new MultiSelectList(Model.AllActors, "ActorId", "FullName"), new { @class = "form-control", multiple = "multiple", name = "actorsDropdown", style = "padding-bottom: 10px" })
                @Html.ValidationMessageFor(model => model.SelectedActorsIds, null, new { @class = "text-danger", id = "actorsValidate" })
            </div>
        </div>

        @Html.EditorFor(model => model.ImagePath, new { Model.ImagePath, htmlAttributes = new { type = "hidden" } })
        @Html.EditorFor(model => model.ImageVirtualPath, new { Model.ImageVirtualPath, htmlAttributes = new { type = "hidden" } })
        @Html.EditorFor(model => model.ImageType, new { Model.ImageType, htmlAttributes = new { type = "hidden" } })

        <div class="form-group">
            <div class="col-md-offset-4">
                <input type="submit" value="Save changes" class="btn btn-primary" />
                @Html.ActionLink("Discard", "Details", new { id = Model.Id }, new { role = "button", @class = "btn btn-default" })
            </div>
        </div>

    </div>
}
<button class="btn btn-warning" id="postThis">Cancel play</button> <span><div title="Confirm Box"></div></span>

@Scripts.Render("~/bundles/jquery")

<script type="text/javascript">
    function readURL(input) {

        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#imagePreview').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);
        }
    }

    $("#imageInput").change(function () {
        readURL(this);
    });
</script>

@*<script type="text/javascript">
    $(document).ready(function () {
        $("#postThis").click(function () {
            if (window.confirm("Are you sure?")) {
                $.ajax({
                    url: '@Url.Action("Cancel", new { Model.Id})',
                    data: { 'id': @Model.Id },
                    type: "post",
                    success: function (data) {
                        if (data.status === 'success') {
                            window.location.href = data.redirectUrl;
                            alert("To uncancel the play, set it's start and end show date, as well as scheduled time.")
                        }
                    }
                })
            }
        });
    });
</script>*@

<script>
    $(function () {
        $("#postThis").click(function (event) {
            event.preventDefault();
            $('<div title="Confirm Box"></div>').dialog({
                open: function (event, ui) {
                    $(this).html("To uncancel the play you must set it's start and end dates again, as well as schedule time. /n/n/n Are you sure?");
                },
                close: function () {
                    $(this).remove();
                },
                resizable: false,
                height: 140,
                modal: true,
                buttons: {
                    'Yes':
                    $.ajax({
                        url: '@Url.Action("Cancel", new { Model.Id})',
                        data: { 'id': @Model.Id },
                        type: "post",
                        success: function (data) {
                            if (data.status === 'success') {
                                window.location.href = data.redirectUrl;
                                alert("To uncancel the play, set it's start and end show date, as well as scheduled time.")
                            }
                        }
                    }),
                    'No': function () {
                        $(this).dialog('close');
                    }
                },
            });
        });
    });
</script>